library(readr)
HFS_Guatemala_2020_Q4 <- read_csv("Downloads/HFS_Guatemala_2020_Q4.csv")
View(HFS_Guatemala_2020_Q4)
View(HFS_Guatemala_2020_Q4)
View(HFS_Guatemala_2020_Q4)
# Display the first few rows of the dataset to confirm it's loaded
head(dataset)
# Import the CSV file
dataset_path <- "/Users/jacksonzhao/Downloads/UNHCR_GTM_2020_HFS_Q4_v2.1.csv"
# Display the first few rows of the dataset to confirm it's loaded
head(dataset)
write.csv(dataclean, file = "HFS_Guatemala_.2020_Q4", row.names = FALSE)
source("~/.active-rstudio-document")
install.packages("shiny")
library(shiny)
shinyUI(
fluidPage(
sidebarPanel(
selectInput("n_breaks", label = "Number of bins:",
choices = c(10, 20, 35, 50), selected = 20),
sliderInput("bw_adjust", label = "Bandwidth adjustment:",
min = 0.2, max = 2, value = 1, step = 0.2)
),
mainPanel(
plotOutput("plot")
)
))
deployApp(account='dss')
install.packages("shiny")
library(shiny)
library(shiny)
shinyServer(function(input, output) {
output$plot=renderPlot({
hist(faithful$eruptions, probability = TRUE, breaks = as.numeric(input$n_breaks),
xlab = "Duration (minutes)", main = "Geyser eruption duration")
dens <- density(faithful$eruptions, adjust = input$bw_adjust)
lines(dens, col = "blue")
})
})
shinyUI(
fluidPage(
sidebarPanel(
selectInput("n_breaks", label = "Number of bins:",
choices = c(10, 20, 35, 50), selected = 20),
sliderInput("bw_adjust", label = "Bandwidth adjustment:",
min = 0.2, max = 2, value = 1, step = 0.2)
),
mainPanel(
plotOutput("plot")
)
))
install.packages("shiny")
runApp("my_app")
# Install library for data loading
install.packages("tidyverse")
library(tidyverse)
# choose working directory and load csv file
data <- read_csv("PublicAssistanceApplicantsProgramDeliveries.csv")
setwd("/Users/jacksonzhao/Desktop/ADS-Spring-Project2-ShinyAPP-Group-11/data")
# choose working directory and load csv file
data <- read_csv("PublicAssistanceApplicantsProgramDeliveries.csv")
# display the first 5 rows
head(data, 5)
# overview of dataset
str(data)
# prepare to clean data
summary(data)
# remove duplicated rows
data <- data[!duplicated(data), ]
# remove missing values
data <- na.omit(data)
# Create a new dataset 'assitance' that contains state's name, the total # of projects, and total shared obligation.
assistance <- data %>%
group_by(stateName) %>% # seperate for each state
summaries(total_projects = n(), # the # of rows in each group by total # of projects per states
total_federal_share_obliged = sum(federalShareObligated, na.rm = TRUE) # sum of federalShareObligated columns by each state by removing all NA
) %>% # %>% is an pip operator that pass command to the next operator.
arrange(desc(total_projects))
assistance <- data %>%
group_by(stateName) %>% # seperate for each state
summarise(total_projects = n(), # the # of rows in each group by total # of projects per states
total_federal_share_obliged = sum(federalShareObligated, na.rm = TRUE) # sum of federalShareObligated columns by each state by removing all NA
) %>% # %>% is an pip operator that pass command to the next operator.
arrange(desc(total_projects))
assistance <- data %>%
group_by(stateName) %>% # seperate for each state
summarise(total_projects = n(), # the # of rows in each group by total # of projects per states
total_federal_share_obliged = sum(federalShareObligated, na.rm = TRUE) # sum of federalShareObligated columns by each state by removing all NA
) %>% # %>% is an pip operator that pass command to the next operator.
arrange(desc(total_projects))
View(assistance)
View(assistance)
View(data)
View(assistance)
# Install library for data loading
install.packages("tidyverse")
install.packages("shiny")
install.packages("ggplot2")
library(tidyverse)
# Install library for data loading
install.packages("tidyverse")
install.packages("shiny")
install.packages("ggplot2")
library(tidyverse)
install.packages("ggplot2")
# Install library for data loading
install.packages("tidyverse")
install.packages("shiny")
install.packages("ggplot2")
library(tidyverse)
# choose working directory and load csv file
data <- read_csv("PublicAssistanceApplicantsProgramDeliveries.csv")
# display the first 5 rows
head(data, 5)
# overview of dataset
str(data)
# prepare to clean data
summary(data)
# remove duplicated rows
data <- data[!duplicated(data), ]
# remove missing values
data <- na.omit(data)
# Create a new dataset 'assitance' that contains state's name, the total # of projects, and total shared obligation.
assistance <- data %>%
group_by(stateName) %>% # seperate for each state
summarise(total_projects = n(), # the # of rows in each group by total # of projects per states
total_federal_share_obliged = sum(federalShareObligated, na.rm = TRUE) # sum of federalShareObligated columns by each state by removing all NA
) %>% # %>% is an pip operator that pass command to the next operator.
arrange(desc(total_projects))
